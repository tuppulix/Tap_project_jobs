version: "3"

services:
  kafka_zookeeper:
    build:
      context: ./kafka
      dockerfile: Dockerfile
    container_name: kafka_zookeeper
    ports:
      - 2181:2181
    command: > 
      bash -c "set -v
              mkdir -p /tmp/zookeeper
              cd /opt/kafka
              zookeeper-server-start.sh config/zookeeper.properties"
    networks:
      tap:
        ipv4_address: 10.0.9.22

  
  kafka_broker:
    build:
      context: ./kafka
      dockerfile: Dockerfile
    container_name: kafka_broker
    depends_on:
      - kafka_zookeeper
    ports:
      - 9092:9092
    command: > 
      bash -c "set -v
              cd /opt/kafka
              kafka-server-start.sh config/server.properties"
    networks:
      tap:
        ipv4_address: 10.0.9.23


  job_topic:
    build:
      context: ./kafka
      dockerfile: Dockerfile
    container_name: job_topic
    command: > 
      bash -c "set -v
              cd /opt/kafka
              kafka-topics.sh --bootstrap-server 10.0.9.23:9092 --list
              kafka-topics.sh --create --bootstrap-server 10.0.9.23:9092 --replication-factor 1 --partitions 1 --topic job_topic
              kafka-topics.sh --bootstrap-server 10.0.9.23:9092 --list"
    depends_on: 
        - kafka_zookeeper
        - kafka_broker
    networks:
      tap:
    

  fluentd:
    container_name: fluentd
    build:
      context: ./fluentd
      dockerfile: Dockerfile
    depends_on:
      - job_topic
    volumes:
      - ./fluentd/conf:/fluentd/etc/
    restart: always
    command: >
            bash -c 'fluentd -c /fluentd/etc/fluentd.conf'
    mem_limit: 512m
    networks:
      tap:
        ipv4_address: 10.0.9.25

  # producer:
  #   container_name: producer 
  #   build:
  #     context: ./archive
  #     dockerfile: Dockerfile
  #   depends_on:
  #     - fluentd
  #   networks:
  #     tap:
  #       ipv4_address: 10.0.9.26

  spark:
    container_name: spark
    build:
      context: ./spark
      dockerfile: Dockerfile
    depends_on:
      - kafka_zookeeper
      - kafka_broker
      - job_topic
    networks:
      tap:
        ipv4_address: 10.0.9.27

  elastic:
    container_name: elastic
    build: 
      context: ./elasticsearch
      dockerfile: Dockerfile
    volumes:
      - ./resources/dataset/datas:/opt/datas
    restart: on-failure
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - "discovery.type=single-node"
      - "xpack.security.enabled=false" # Disabilita la sicurezza se non necessario
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      # Aggiungi altre opzioni di configurazione delle prestazioni se necessario
    healthcheck:
      test: ["CMD-SHELL", "curl --silent localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 30s
      retries: 5
    networks:
      tap:
        ipv4_address: 10.0.9.28

 #--- Kibana ---
  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:8.13.4
    build: 
      context: ./kibana
      dockerfile: Dockerfile
    hostname: kibana

    volumes:
      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml

    depends_on:
      - elastic
    ports:
      - 5601:5601
    environment:
      - xpack.security.enabled=false
      - KBN_PATH_CONF=/usr/share/kibana/config
    networks:
      tap:
        ipv4_address: 10.0.9.31

networks:
  tap:
    external: true



